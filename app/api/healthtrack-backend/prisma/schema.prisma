// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - represents a user in the system
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?   // Nullable for Google OAuth users
  firstName     String?
  lastName      String?
  googleId      String?   @unique // For Google OAuth
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  healthData    HealthData[]
  goals         Goal[]
  integrations  Integration[]

  @@map("users")
}

// HealthData model - represents health metrics tracked by users
model HealthData {
  id          String    @id @default(uuid())
  userId      String
  date        DateTime  @default(now())
  
  // Metrics
  weight      Float?    // in kg
  height      Float?    // in cm
  steps       Int?
  calories    Int?
  sleep       Float?    // hours of sleep
  water       Float?    // liters of water
  exercise    Int?      // minutes of exercise
  heartRate   Int?      // average heart rate
  
  // Additional data
  notes       String?
  mood        String?   // e.g., "happy", "tired", "energetic"
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_data")
  @@index([userId, date])
}

// Goal model - represents user fitness/health goals
model Goal {
  id          String    @id @default(uuid())
  userId      String
  title       String
  description String?
  type        GoalType  // e.g., "weight", "steps", "exercise"
  target      Float     // target value
  current     Float     @default(0) // current progress
  unit        String    // e.g., "kg", "steps", "minutes"
  startDate   DateTime  @default(now())
  endDate     DateTime
  status      GoalStatus @default(ACTIVE)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
  @@index([userId, status])
}

// Enum for goal types
enum GoalType {
  WEIGHT_LOSS
  WEIGHT_GAIN
  STEPS
  EXERCISE
  SLEEP
  WATER
  CALORIES
  CUSTOM
}

// Enum for goal status
enum GoalStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  PAUSED
}

// Integration model - represents third-party app integrations
model Integration {
  id            String    @id @default(uuid())
  userId        String
  provider      IntegrationProvider
  accessToken   String    // Encrypted in production
  refreshToken  String?   // Encrypted in production
  expiresAt     DateTime?
  isActive      Boolean   @default(true)
  lastSyncedAt  DateTime?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("integrations")
  @@unique([userId, provider])
  @@index([userId, isActive])
}

// Enum for integration providers
enum IntegrationProvider {
  GOOGLE_FIT
  FITBIT
  APPLE_HEALTH
  STRAVA
  MYFITNESSPAL
}
